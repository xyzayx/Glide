const { spawnSync } = require('child_process');
const os = require('os');
const path = require('path');

function req(packageName) {
  let module;
  const npmDir = path.join(os.tmpdir(), packageName);

  try {
    // Try to require the module
    module = require(packageName);
  } catch (e) {
    if (e.code === 'MODULE_NOT_FOUND') {
      console.log(`${packageName} not found in current module context. Attempting to require from temp directory.`);
      try {
        // Try to require the module from the temp directory
        module = require(path.join(npmDir, 'node_modules', packageName));
        console.log(`Successfully required ${packageName} from temp directory.`);
      } catch(err) {
        console.log(`${packageName} not found in temp directory. Attempting to download from npm.`);
        const npmProcess = spawnSync('bash', ['-l', '-c', `npm install --prefix ${npmDir} ${packageName}`], {
          env: Object.assign({}, process.env, { HOME: os.homedir() }),
          stdio: 'inherit'
        });
        if (npmProcess.error) {
          console.error(`Could not download ${packageName} from npm: ${npmProcess.error}`);
          // Rethrow the original error
          throw e;
        }
        try {
          // Try to require the module again
          module = require(path.join(npmDir, 'node_modules', packageName));
          console.log(`Successfully downloaded and required ${packageName}.`);
        } catch (err) {
          console.error(`Could not require ${packageName} after download.`);
          // Rethrow the original error
          throw e;
        }
      }
    } else {
      // Rethrow the original error
      throw e;
    }
  }
  return module;
}

module.exports = req;